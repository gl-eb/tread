[{"path":"https://www.gl-eb.me/tread/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 tread authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.gl-eb.me/tread/articles/tread.html","id":"reading-and-plotting-of-od-values","dir":"Articles","previous_headings":"","what":"Reading and Plotting of OD Values","title":"Using tread","text":"First import optical density measurements .xlsx file using tparse() file using contains OD measurements 96-well plate single timepoint multiple measurements per well. table get back tparse() contains four OD measurements well addition mean standard deviation. ‚Äôs important note data set contains measurements wells 96-well plate, tread‚Äôs functions can import data number measured wells. can now plot data, e.g.¬†using ggplate::plate_plot().  can also add additional information table, e.g.¬†wells contain particular becterial strains liquid medium blanking. recommend use spreadsheet software Excel create similar table needs import R instead typing columns shown . medium-wells allows us blank measurements. Finally, can filter wells contain bacteria plot blanked OD values.","code":"# get path to Excel file file_OD <- system.file(   \"extdata\",   \"single_time_multiple_reads.xlsx\",   package = \"tread\" )  # read data from file dat_OD <- file_OD |> tparse() #> ‚Ñπ Multiple reads per well detected dat_OD #> # A tibble: 96 √ó 7 #>    well    mean  st_dev   x1_2   x0_1   x1_0   x2_1 #>    <chr>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 A1    0.104  0.0243  0.0960 0.0896 0.0891 0.140  #>  2 A2    0.0951 0.00730 0.0913 0.0913 0.0918 0.106  #>  3 A3    0.105  0.0279  0.0944 0.0885 0.0893 0.146  #>  4 A4    0.102  0.0215  0.0933 0.0899 0.0907 0.134  #>  5 A5    0.0950 0.0122  0.0887 0.0887 0.0891 0.113  #>  6 A6    0.0933 0.00280 0.0944 0.0928 0.0897 0.0964 #>  7 A7    0.0968 0.00940 0.0932 0.0932 0.0900 0.111  #>  8 A8    0.0941 0.00560 0.0914 0.0901 0.0925 0.102  #>  9 A9    0.0945 0.00910 0.0898 0.0897 0.0903 0.108  #> 10 A10   0.0935 0.00680 0.0901 0.0905 0.0897 0.104  #> # ‚Ñπ 86 more rows library(ggplate) #> üìä Welcome to ggplate version 0.1.3! üìà #>                              #> üñç Have fun plotting your data! üíª dat_OD |> plate_plot(   position = well,   value = mean,   plate_size = 96,   plate_type = \"round\" ) # we create a table that describes the content of each well annotation_OD <- tibble::tibble(   well = dat_OD$well,   content = c(     \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\",     \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"A1\", \"buffer\", \"A3\",     \"buffer\", \"D1\", \"buffer\", \"D3\", \"buffer\", \"G1\", \"buffer\", \"G3\",     \"buffer\", \"buffer\", \"A2\", \"buffer\", \"A4\", \"buffer\", \"D2\", \"buffer\",     \"D4\", \"buffer\", \"G2\", \"buffer\", \"blank\", \"B1\", \"buffer\", \"B3\",     \"buffer\", \"E1\", \"buffer\", \"E3\", \"buffer\", \"H1\", \"buffer\", \"H3\",     \"buffer\", \"buffer\", \"B2\", \"buffer\", \"B4\", \"buffer\", \"E2\", \"buffer\",     \"E4\", \"buffer\", \"H2\", \"buffer\", \"blank\", \"C1\", \"buffer\", \"C3\",     \"buffer\", \"F1\", \"buffer\", \"F3\", \"buffer\", \"J1\", \"buffer\", \"J3\",     \"buffer\", \"buffer\", \"C2\", \"buffer\", \"C4\", \"buffer\", \"F2\", \"buffer\",     \"F4\", \"buffer\", \"J2\", \"buffer\", \"blank\", \"buffer\", \"buffer\",     \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\", \"buffer\",     \"buffer\", \"buffer\", \"buffer\"   ) )  # we join the annotation table to the OD table dat_OD <- dat_OD |>   dplyr::left_join(annotation_OD, by = dplyr::join_by(\"well\")) |>   dplyr::relocate(\"content\", .after = \"well\")  dat_OD #> # A tibble: 96 √ó 8 #>    well  content   mean  st_dev   x1_2   x0_1   x1_0   x2_1 #>    <chr> <chr>    <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 A1    buffer  0.104  0.0243  0.0960 0.0896 0.0891 0.140  #>  2 A2    buffer  0.0951 0.00730 0.0913 0.0913 0.0918 0.106  #>  3 A3    buffer  0.105  0.0279  0.0944 0.0885 0.0893 0.146  #>  4 A4    buffer  0.102  0.0215  0.0933 0.0899 0.0907 0.134  #>  5 A5    buffer  0.0950 0.0122  0.0887 0.0887 0.0891 0.113  #>  6 A6    buffer  0.0933 0.00280 0.0944 0.0928 0.0897 0.0964 #>  7 A7    buffer  0.0968 0.00940 0.0932 0.0932 0.0900 0.111  #>  8 A8    buffer  0.0941 0.00560 0.0914 0.0901 0.0925 0.102  #>  9 A9    buffer  0.0945 0.00910 0.0898 0.0897 0.0903 0.108  #> 10 A10   buffer  0.0935 0.00680 0.0901 0.0905 0.0897 0.104  #> # ‚Ñπ 86 more rows # first we calculate the blanking value from the average of medium-only wells blank <- dat_OD |>   dplyr::filter(content == \"blank\") |>   dplyr::pull(mean) |>   mean()  # then we substract the blanking value from all OD values # (mean and all four reading from each well) dat_OD <- dat_OD |>   dplyr::mutate(     dplyr::across(       c(\"mean\", tidyselect::starts_with(\"x\")),       ~ .x - blank     )   )  dat_OD #> # A tibble: 96 √ó 8 #>    well  content     mean  st_dev    x1_2    x0_1    x1_0      x2_1 #>    <chr> <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>     <dbl> #>  1 A1    buffer  -0.00387 0.0243  -0.0115 -0.0179 -0.0184  0.0322   #>  2 A2    buffer  -0.0124  0.00730 -0.0162 -0.0162 -0.0157 -0.00137  #>  3 A3    buffer  -0.00287 0.0279  -0.0131 -0.0190 -0.0182  0.0389   #>  4 A4    buffer  -0.00547 0.0215  -0.0142 -0.0176 -0.0168  0.0268   #>  5 A5    buffer  -0.0125  0.0122  -0.0188 -0.0188 -0.0184  0.00573  #>  6 A6    buffer  -0.0142  0.00280 -0.0131 -0.0147 -0.0178 -0.0111   #>  7 A7    buffer  -0.0107  0.00940 -0.0143 -0.0143 -0.0175  0.00323  #>  8 A8    buffer  -0.0134  0.00560 -0.0161 -0.0174 -0.0150 -0.00507  #>  9 A9    buffer  -0.0130  0.00910 -0.0177 -0.0178 -0.0172  0.000733 #> 10 A10   buffer  -0.0140  0.00680 -0.0174 -0.0170 -0.0178 -0.00377  #> # ‚Ñπ 86 more rows library(ggplot2) library(ggbeeswarm)  # filter out wells that do not contain bacteria and separate the population name # into the strain name and the replicate number dat_OD <- dat_OD |>   dplyr::filter(content != \"buffer\" & content != \"blank\") |>   tidyr::separate(\"content\", into = c(\"strain\", \"replicate\"), sep = 1)  dat_OD #> # A tibble: 33 √ó 9 #>    well  strain replicate  mean  st_dev  x1_2  x0_1  x1_0  x2_1 #>    <chr> <chr>  <chr>     <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 B1    A      1         0.168 0.0245  0.169 0.150 0.151 0.202 #>  2 B3    A      3         0.169 0.0215  0.164 0.155 0.156 0.201 #>  3 B5    D      1         0.123 0.0124  0.122 0.110 0.119 0.139 #>  4 B7    D      3         0.128 0.0134  0.146 0.114 0.124 0.130 #>  5 B9    G      1         0.128 0.0141  0.116 0.121 0.128 0.148 #>  6 B11   G      3         0.124 0.0126  0.122 0.118 0.114 0.142 #>  7 C2    A      2         0.185 0.0211  0.187 0.169 0.170 0.214 #>  8 C4    A      4         0.171 0.0232  0.167 0.153 0.159 0.205 #>  9 C6    D      2         0.125 0.0165  0.118 0.110 0.123 0.148 #> 10 C8    D      4         0.119 0.00620 0.116 0.111 0.124 0.124 #> # ‚Ñπ 23 more rows # we plot the blanked OD values grouped by the strain name dat_OD |> ggplot(aes(x = strain, mean, fill = replicate)) +   geom_hline(yintercept = 0, linetype = 2, alpha = 0.5) +   geom_beeswarm(cex = 2.5, size = 3, color = \"black\", shape = 21) +   scale_fill_viridis_d() +   labs(     x = \"Strain\",     y = bquote(\"Bacterial Density (\"*OD[600]*\")\"),     fill = \"Replicate\"   ) +   theme_light(15)"},{"path":"https://www.gl-eb.me/tread/articles/tread.html","id":"joining-multiple-pieces-and-plotting-of-a-growth-curve","dir":"Articles","previous_headings":"","what":"Joining Multiple Pieces and Plotting of a Growth Curve","title":"Using tread","text":"running longer kinetic measurements (e.g.¬†growth curves), plate readers used members lab. kinetic measurement programs can stopped restarted, plate reader software -control‚Ñ¢ always place data restarts separate Excel sheet. Merging segments kinetic measurements laborious done manually. Using tunite() saves considerable amount time. function : Importing data single sheet inside Excel file Getting exact start time duration segment Calculating time offsets necessary merge segments continuous time series tparse() used step (1), tunite() print diagnostic messages sheets imports. can suppress using suppressMessages(). table tunite() returns contains time series OD measurements number wells. add additional information table. case name bacterial population well number signify replicate growth curve. now use medium-wells blank OD measurements. Now ready plot growth curves.","code":"# get path to Excel file file_gc <- system.file(   \"extdata\",   \"time_series_segments.xlsx\",   package = \"tread\" )  # read data from file dat_gc <- file_gc |> tunite() #> ‚Ñπ Time series detected #> ‚Ñπ Multiple reads per well detected #> ‚Ñπ Time series detected #> ‚Ñπ Multiple reads per well detected # repeat with message suppression dat_gc <- file_gc |> tunite() |> suppressMessages() dat_gc #> # A tibble: 3,432 √ó 9 #>    well   time  temp  mean st_dev  x1_2  x0_1  x1_0  x2_1 #>    <chr> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 B1        0  30.6 0.131 0.0254 0.131 0.111 0.114 0.166 #>  2 B1      900  30.4 0.129 0.0216 0.132 0.112 0.115 0.159 #>  3 B1     1500  30.5 0.133 0.0226 0.146 0.113 0.114 0.157 #>  4 B1     2100  30.7 0.132 0.0226 0.143 0.113 0.115 0.160 #>  5 B1     2700  30.6 0.133 0.0220 0.146 0.114 0.116 0.158 #>  6 B1     3300  30.2 0.133 0.0208 0.144 0.114 0.116 0.156 #>  7 B1     3900  30.6 0.135 0.0227 0.147 0.115 0.117 0.161 #>  8 B1     4500  30.6 0.134 0.0210 0.146 0.116 0.118 0.158 #>  9 B1     5100  30.5 0.135 0.0208 0.147 0.117 0.119 0.159 #> 10 B1     5700  30.5 0.136 0.0201 0.147 0.118 0.120 0.158 #> # ‚Ñπ 3,422 more rows # we create a table that contains information which population is inside which # well and also gives the replicate wells a replicate number annotation_gc <- tibble::tibble(   well = c(     \"B1\", \"B2\", \"B3\", \"B4\", \"C4\", \"C5\", \"C6\", \"C8\", \"D9\", \"D10\", \"D11\", \"D12\",     \"E12\", \"F1\", \"F2\", \"F4\", \"G5\",\"G6\", \"G7\", \"G8\", \"H8\", \"H9\", \"H10\", \"H12\"   ),   population = c(     \"D1\", \"D2\", \"D3\", \"D4\", \"H1\", \"H2\", \"H3\", \"blank\", \"D1\", \"D2\", \"D3\", \"D4\",     \"H1\", \"H2\", \"H3\", \"blank\", \"D1\", \"D2\", \"D3\", \"D4\", \"H1\", \"H2\", \"H3\", \"blank\"   ),   gc_rep = c(     1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3   ) )  # we join the annotation table to the OD table dat_gc <- dat_gc |>   dplyr::left_join(annotation_gc, by = dplyr::join_by(\"well\")) |>   dplyr::relocate(c(\"population\", \"gc_rep\"), .after = \"well\")  dat_gc #> # A tibble: 3,432 √ó 11 #>    well  population gc_rep  time  temp  mean st_dev  x1_2  x0_1  x1_0  x2_1 #>    <chr> <chr>       <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 B1    D1              1     0  30.6 0.131 0.0254 0.131 0.111 0.114 0.166 #>  2 B1    D1              1   900  30.4 0.129 0.0216 0.132 0.112 0.115 0.159 #>  3 B1    D1              1  1500  30.5 0.133 0.0226 0.146 0.113 0.114 0.157 #>  4 B1    D1              1  2100  30.7 0.132 0.0226 0.143 0.113 0.115 0.160 #>  5 B1    D1              1  2700  30.6 0.133 0.0220 0.146 0.114 0.116 0.158 #>  6 B1    D1              1  3300  30.2 0.133 0.0208 0.144 0.114 0.116 0.156 #>  7 B1    D1              1  3900  30.6 0.135 0.0227 0.147 0.115 0.117 0.161 #>  8 B1    D1              1  4500  30.6 0.134 0.0210 0.146 0.116 0.118 0.158 #>  9 B1    D1              1  5100  30.5 0.135 0.0208 0.147 0.117 0.119 0.159 #> 10 B1    D1              1  5700  30.5 0.136 0.0201 0.147 0.118 0.120 0.158 #> # ‚Ñπ 3,422 more rows # first we calculate the blanking value from the average of medium-only wells blank <- dat_gc |>   dplyr::filter(population == \"blank\") |>   dplyr::pull(mean) |>   mean()  # then we substract the blanking value from all OD values # (mean and all four reading from each well) dat_gc <- dat_gc |>   dplyr::mutate(     dplyr::across(       c(\"mean\", tidyselect::starts_with(\"x\")),       ~ .x - blank     )   )  dat_gc #> # A tibble: 3,432 √ó 11 #>    well  population gc_rep  time  temp    mean st_dev    x1_2     x0_1     x1_0 #>    <chr> <chr>       <dbl> <dbl> <dbl>   <dbl>  <dbl>   <dbl>    <dbl>    <dbl> #>  1 B1    D1              1     0  30.6 0.00893 0.0254 0.00933 -0.0111  -0.00727 #>  2 B1    D1              1   900  30.4 0.00743 0.0216 0.00983 -0.0102  -0.00697 #>  3 B1    D1              1  1500  30.5 0.0109  0.0226 0.0241  -0.00907 -0.00737 #>  4 B1    D1              1  2100  30.7 0.0107  0.0226 0.0209  -0.00877 -0.00687 #>  5 B1    D1              1  2700  30.6 0.0115  0.0220 0.0239  -0.00787 -0.00607 #>  6 B1    D1              1  3300  30.2 0.0111  0.0208 0.0225  -0.00737 -0.00537 #>  7 B1    D1              1  3900  30.6 0.0131  0.0227 0.0250  -0.00697 -0.00477 #>  8 B1    D1              1  4500  30.6 0.0128  0.0210 0.0243  -0.00577 -0.00387 #>  9 B1    D1              1  5100  30.5 0.0135  0.0208 0.0248  -0.00467 -0.00307 #> 10 B1    D1              1  5700  30.5 0.0139  0.0201 0.0258  -0.00397 -0.00207 #> # ‚Ñπ 3,422 more rows #> # ‚Ñπ 1 more variable: x2_1 <dbl> library(ggplot2)  # filter out blank wells dat_gc <- dat_gc |> dplyr::filter(population != \"blank\")  # plot OD values over time dat_gc |> ggplot(aes(time / 3600, mean, group = well)) +   facet_wrap(vars(population), nrow = 2, scales = \"free_x\") +   geom_line(linewidth = 0.5) +   scale_x_continuous(limits = c(0, 24), breaks = seq(0, 24, 4)) +   labs(     x = \"Time [h]\",     y = \"OD600\"   ) +   theme_light(15)"},{"path":"https://www.gl-eb.me/tread/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gleb G. Ebert. Author, maintainer, copyright holder. ETH Zurich. Funder, copyright holder.","code":""},{"path":"https://www.gl-eb.me/tread/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ebert G (2023). tread: Read Tecan Infinite 200 Pro Data. doi:10.5281/zenodo.10200272, R package, https://github.com/gl-eb/tread/, https://www.gl-eb./tread/.","code":"@Manual{,   title = {tread: Read Tecan Infinite 200 Pro Data},   author = {Gleb Ebert},   year = {2023},   publisher = {Zenodo},   note = {R package, https://github.com/gl-eb/tread/},   doi = {10.5281/zenodo.10200272},   url = {https://www.gl-eb.me/tread/}, }"},{"path":"https://www.gl-eb.me/tread/index.html","id":"tread-","dir":"","previous_headings":"","what":"Read Tecan Infinite 200 Pro Data","title":"Read Tecan Infinite 200 Pro Data","text":"tread R package extract data Excel files generated Tecan Infinite 200 Pro plate readers.","code":""},{"path":"https://www.gl-eb.me/tread/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read Tecan Infinite 200 Pro Data","text":"can install tread GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"gl-eb/tread\")"},{"path":"https://www.gl-eb.me/tread/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development Version","title":"Read Tecan Infinite 200 Pro Data","text":"can also install development version. may contain unreleased features, changes bugfixes, also likely rapidly evolve, potentially breaking code. use development version willing deal .","code":"devtools::install_github(\"gl-eb/tread\", ref = \"develop\")"},{"path":"https://www.gl-eb.me/tread/index.html","id":"hot-to-use","dir":"","previous_headings":"","what":"Hot To Use","title":"Read Tecan Infinite 200 Pro Data","text":"Examples analysis workflows documented vignette(\"tread\")","code":"library(tread) # parse your own set of measurements dat <- tparse(\"path/to/file.xlsx\")  # specify sheet of the excel file (default: 1) dat <- tparse(\"path/to/file.xlsx\", sheet = 3)  # unite multiple segments of a time series of measurements dat <- tunite(\"path/to/file.xlsx\")  # specify with which sheets to start and how many to include dat <- tunite(\"path/to/file.xlsx\", segments = 2, start = 1)"},{"path":"https://www.gl-eb.me/tread/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Read Tecan Infinite 200 Pro Data","text":"Tecan¬Æ trademark Tecan Group Ltd., M√§nnedorf, Switzerland. authors affiliation users products. plate reader icon designed kehan licensed CC0","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_multiple_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Read multiple measurements per well ‚Äî single_time_multiple_reads","title":"Read multiple measurements per well ‚Äî single_time_multiple_reads","text":"single_time_multiple_reads() gets Tecan plate reader measurement Excel file multiple readings well taken","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_multiple_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read multiple measurements per well ‚Äî single_time_multiple_reads","text":"","code":"single_time_multiple_reads(dat_raw)"},{"path":"https://www.gl-eb.me/tread/reference/single_time_multiple_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read multiple measurements per well ‚Äî single_time_multiple_reads","text":"dat_raw (tibble) excel sheet","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_multiple_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read multiple measurements per well ‚Äî single_time_multiple_reads","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_multiple_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read multiple measurements per well ‚Äî single_time_multiple_reads","text":"","code":"traw$single_time_multiple_reads |> single_time_multiple_reads() #> # A tibble: 96 √ó 7 #>    Well    Mean   StDev  `1;2`  `0;1`  `1;0`  `2;1` #>    <chr>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 A1    0.104  0.0243  0.0960 0.0896 0.0891 0.140  #>  2 A2    0.0951 0.00730 0.0913 0.0913 0.0918 0.106  #>  3 A3    0.105  0.0279  0.0944 0.0885 0.0893 0.146  #>  4 A4    0.102  0.0215  0.0933 0.0899 0.0907 0.134  #>  5 A5    0.0950 0.0122  0.0887 0.0887 0.0891 0.113  #>  6 A6    0.0933 0.00280 0.0944 0.0928 0.0897 0.0964 #>  7 A7    0.0968 0.00940 0.0932 0.0932 0.0900 0.111  #>  8 A8    0.0941 0.00560 0.0914 0.0901 0.0925 0.102  #>  9 A9    0.0945 0.00910 0.0898 0.0897 0.0903 0.108  #> 10 A10   0.0935 0.00680 0.0901 0.0905 0.0897 0.104  #> # ‚Ñπ 86 more rows"},{"path":"https://www.gl-eb.me/tread/reference/single_time_single_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Read single measurement per well ‚Äî single_time_single_reads","title":"Read single measurement per well ‚Äî single_time_single_reads","text":"single_time_single_reads() gets Tecan plate reader measurement Excel file single reading taken well","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_single_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read single measurement per well ‚Äî single_time_single_reads","text":"","code":"single_time_single_reads(dat_raw)"},{"path":"https://www.gl-eb.me/tread/reference/single_time_single_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read single measurement per well ‚Äî single_time_single_reads","text":"dat_raw (tibble) excel sheet","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_single_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read single measurement per well ‚Äî single_time_single_reads","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/single_time_single_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read single measurement per well ‚Äî single_time_single_reads","text":"","code":"traw$single_time_single_reads |> single_time_single_reads() #> # A tibble: 96 √ó 2 #>    well   value #>    <chr>  <dbl> #>  1 A1    0.0932 #>  2 A2    0.143  #>  3 A3    0.114  #>  4 A4    0.312  #>  5 A5    0.136  #>  6 A6    0.112  #>  7 A7    0.245  #>  8 A8    0.119  #>  9 A9    0.0858 #> 10 A10   0.0844 #> # ‚Ñπ 86 more rows"},{"path":"https://www.gl-eb.me/tread/reference/time_series_multiple_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","title":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","text":"time_series_multiple_reads() gets series Tecan plate reader measurements Excel file timepoint contains multiple readings well","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_multiple_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","text":"","code":"time_series_multiple_reads(dat_raw)"},{"path":"https://www.gl-eb.me/tread/reference/time_series_multiple_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","text":"dat_raw (tibble) Excel sheet returned readxl::read_xlsx()","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_multiple_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_multiple_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a time series of multiple measurements per well ‚Äî time_series_multiple_reads","text":"","code":"traw$time_series_multiple_reads |> time_series_multiple_reads() #> # A tibble: 120 √ó 10 #>    well  `Time [s]` `Temp. [¬∞C]`   Mean  StDev  `1;2` `2;1`  `1;1`  `0;1`  `1;0` #>    <chr>      <dbl>        <dbl>  <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl> #>  1 A1             0         30.6 0.0959 0.0106 0.0897 0.113 0.0873 0.0902 0.0991 #>  2 A1           600         30.3 0.108  0.0207 0.0925 0.144 0.104  0.104  0.0963 #>  3 A1          1200         30.6 0.106  0.0171 0.0926 0.135 0.102  0.102  0.0961 #>  4 A1          1800         30.7 0.108  0.0193 0.0924 0.140 0.102  0.109  0.0953 #>  5 A1          2400         30.5 0.104  0.0181 0.0920 0.134 0.0908 0.105  0.0952 #>  6 A1          3000         30.5 0.103  0.0184 0.0917 0.134 0.0895 0.103  0.0947 #>  7 A1          3600         30.3 0.102  0.0187 0.0921 0.135 0.0892 0.101  0.0951 #>  8 A1          4200         30.4 0.101  0.0165 0.0919 0.130 0.0898 0.101  0.0941 #>  9 A1          4800         30.5 0.101  0.0174 0.0919 0.131 0.0893 0.0996 0.0933 #> 10 A1          5400         30.6 0.101  0.0170 0.0916 0.131 0.0887 0.0989 0.0943 #> # ‚Ñπ 110 more rows"},{"path":"https://www.gl-eb.me/tread/reference/time_series_single_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Read time series of measurements ‚Äî time_series_single_reads","title":"Read time series of measurements ‚Äî time_series_single_reads","text":"time_series_single_reads() gets time series Tecan plate reader measurements Excel file single reading taken well","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_single_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read time series of measurements ‚Äî time_series_single_reads","text":"","code":"time_series_single_reads(dat_raw)"},{"path":"https://www.gl-eb.me/tread/reference/time_series_single_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read time series of measurements ‚Äî time_series_single_reads","text":"dat_raw (tibble) excel sheet","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_single_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read time series of measurements ‚Äî time_series_single_reads","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/time_series_single_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read time series of measurements ‚Äî time_series_single_reads","text":"","code":"traw$time_series_single_reads |> time_series_single_reads() #> # A tibble: 45 √ó 5 #>    well  `Cycle Nr.` `Time [s]` `Temp. [¬∞C]`  value #>    <chr>       <dbl>      <dbl>        <dbl>  <dbl> #>  1 A1              1          0         29.7 0.0947 #>  2 A2              1          0         29.7 0.144  #>  3 A3              1          0         29.7 0.118  #>  4 B1              1          0         29.7 0.137  #>  5 B2              1          0         29.7 0.141  #>  6 B3              1          0         29.7 0.389  #>  7 C1              1          0         29.7 0.188  #>  8 C2              1          0         29.7 0.173  #>  9 C3              1          0         29.7 0.220  #> 10 A1              2         10         29.6 0.0951 #> # ‚Ñπ 35 more rows"},{"path":"https://www.gl-eb.me/tread/reference/tparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","title":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","text":"tparse() reads data Excel file produced Tecan Infinite 200 Pro plate reader. automatically determines type measurement (single time point time series, single multiple reads per well) handle data appropriately.","code":""},{"path":"https://www.gl-eb.me/tread/reference/tparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","text":"","code":"tparse(xlsx_file, xlsx_sheet = 1)"},{"path":"https://www.gl-eb.me/tread/reference/tparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","text":"xlsx_file (character) path Excel file xlsx_sheet (numeric) index Excel sheet read (default: 1)","code":""},{"path":"https://www.gl-eb.me/tread/reference/tparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/tparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a Tecan Infinite 200 Pro plate reader file ‚Äî tparse","text":"","code":"tparse(   system.file(     \"extdata\",     \"time_series_multiple_reads.xlsx\",     package = \"tread\"   ) ) #> ‚Ñπ Multiple reads per well detected #> ‚Ñπ Time series detected #> # A tibble: 120 √ó 10 #>    well   time  temp   mean st_dev   x1_2  x2_1   x1_1   x0_1   x1_0 #>    <chr> <dbl> <dbl>  <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl> #>  1 A1        0  30.6 0.0959 0.0106 0.0897 0.113 0.0873 0.0902 0.0991 #>  2 A1      600  30.3 0.108  0.0207 0.0925 0.144 0.104  0.104  0.0963 #>  3 A1     1200  30.6 0.106  0.0171 0.0926 0.135 0.102  0.102  0.0961 #>  4 A1     1800  30.7 0.108  0.0193 0.0924 0.140 0.102  0.109  0.0953 #>  5 A1     2400  30.5 0.104  0.0181 0.0920 0.134 0.0908 0.105  0.0952 #>  6 A1     3000  30.5 0.103  0.0184 0.0917 0.134 0.0895 0.103  0.0947 #>  7 A1     3600  30.3 0.102  0.0187 0.0921 0.135 0.0892 0.101  0.0951 #>  8 A1     4200  30.4 0.101  0.0165 0.0919 0.130 0.0898 0.101  0.0941 #>  9 A1     4800  30.5 0.101  0.0174 0.0919 0.131 0.0893 0.0996 0.0933 #> 10 A1     5400  30.6 0.101  0.0170 0.0916 0.131 0.0887 0.0989 0.0943 #> # ‚Ñπ 110 more rows"},{"path":"https://www.gl-eb.me/tread/reference/traw.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw data for conversion to long format ‚Äî traw","title":"Raw data for conversion to long format ‚Äî traw","text":"Four datasets Tecan Infinite 200 Pro runs use different combinations two parameters: single timepoint measurement timeseries measurements single multiple reads per well","code":""},{"path":"https://www.gl-eb.me/tread/reference/traw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw data for conversion to long format ‚Äî traw","text":"","code":"traw"},{"path":"https://www.gl-eb.me/tread/reference/traw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw data for conversion to long format ‚Äî traw","text":"list four tibbles dat_raw_1 single timepoint single read per well dat_raw_2 single timepoint multiple reads per well dat_raw_3 timeseries single read per well dat_raw_4 timeseries multiple reads per well","code":""},{"path":"https://www.gl-eb.me/tread/reference/traw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Raw data for conversion to long format ‚Äî traw","text":"Gleb Ebert","code":""},{"path":"https://www.gl-eb.me/tread/reference/tread-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tread: Read Tecan Infinite 200 Pro Data ‚Äî tread-package","title":"tread: Read Tecan Infinite 200 Pro Data ‚Äî tread-package","text":"Read Excel files generated Tecan Infinite 200 Pro plate reader. data returned tidy format ready downstream analysis plotting.","code":""},{"path":[]},{"path":"https://www.gl-eb.me/tread/reference/tread-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tread: Read Tecan Infinite 200 Pro Data ‚Äî tread-package","text":"Maintainer: Gleb G. Ebert dev@gl-eb.(ORCID) [copyright holder] contributors: ETH Zurich [funder, copyright holder]","code":""},{"path":"https://www.gl-eb.me/tread/reference/tread_temperature.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time series of temperature values ‚Äî tread_temperature","title":"Get time series of temperature values ‚Äî tread_temperature","text":"tread_temperature() deprecated supported one type data (time series multiple readings per well) result can achieved tparse()","code":""},{"path":"https://www.gl-eb.me/tread/reference/tread_temperature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time series of temperature values ‚Äî tread_temperature","text":"","code":"tread_temperature(xlsx_file, xlsx_sheet = 1)"},{"path":"https://www.gl-eb.me/tread/reference/tread_temperature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time series of temperature values ‚Äî tread_temperature","text":"xlsx_file (character) path Excel file xlsx_sheet (numeric) index Excel sheet read (default: 1)","code":""},{"path":"https://www.gl-eb.me/tread/reference/tread_temperature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time series of temperature values ‚Äî tread_temperature","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/tread_temperature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time series of temperature values ‚Äî tread_temperature","text":"","code":"tread_temperature(   system.file(     \"extdata\",     \"time_series_multiple_reads.xlsx\",     package = \"tread\"   ) ) #> Warning: `tread_temperature()` was deprecated in tread 0.4.0. #> ‚Ñπ This function is a special case of tparse(); use it instead #> # A tibble: 25 √ó 2 #>     time temperature #>    <int>       <dbl> #>  1     0        30.6 #>  2   600        30.3 #>  3  1200        30.6 #>  4  1800        30.7 #>  5  2400        30.5 #>  6  3000        30.5 #>  7  3600        30.3 #>  8  4200        30.4 #>  9  4800        30.5 #> 10  5400        30.6 #> # ‚Ñπ 15 more rows # -> tparse(   system.file(     \"extdata\",     \"time_series_multiple_reads.xlsx\",     package = \"tread\"   ) ) |> dplyr::select(time, temp) |> dplyr::distinct() #> ‚Ñπ Multiple reads per well detected #> ‚Ñπ Time series detected #> # A tibble: 20 √ó 2 #>      time  temp #>     <dbl> <dbl> #>  1     0   30.6 #>  2   600   30.3 #>  3  1200   30.6 #>  4  1800   30.7 #>  5  2400   30.5 #>  6  3000   30.5 #>  7  3600   30.3 #>  8  4200   30.4 #>  9  4800   30.5 #> 10  5400   30.6 #> 11  6000.  30.8 #> 12  6600.  30.8 #> 13  7200.  31   #> 14  7800.  30.9 #> 15  8400.  30.9 #> 16  9000.  31.2 #> 17  9600.  31.2 #> 18 10200.  31.3 #> 19 10800.  31   #> 20 11400.  31.2"},{"path":"https://www.gl-eb.me/tread/reference/tunite.html","id":null,"dir":"Reference","previous_headings":"","what":"Stitch together segments of time series measurements ‚Äî tunite","title":"Stitch together segments of time series measurements ‚Äî tunite","text":"Parses Tecan Infinite 200 Pro plate reader Excel file contains segments time series spread multiple sheets automatically stitches together accounting time gap ","code":""},{"path":"https://www.gl-eb.me/tread/reference/tunite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stitch together segments of time series measurements ‚Äî tunite","text":"","code":"tunite(xlsx_file, segments = NULL, skip = 0)"},{"path":"https://www.gl-eb.me/tread/reference/tunite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stitch together segments of time series measurements ‚Äî tunite","text":"xlsx_file (character) path Excel file segments (numeric) number segments stitch together, starting last sheet (default: number sheets) skip (numeric) number sheets skip, starting last sheet (default: 0). Note empty sheets skipped automatically","code":""},{"path":"https://www.gl-eb.me/tread/reference/tunite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stitch together segments of time series measurements ‚Äî tunite","text":"tibble::tibble() containing tidy data","code":""},{"path":"https://www.gl-eb.me/tread/reference/tunite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stitch together segments of time series measurements ‚Äî tunite","text":"","code":"tunite(   system.file(     \"extdata\",     \"time_series_segments.xlsx\",     package = \"tread\"   ) ) #> ‚Ñπ Time series detected #> ‚Ñπ Multiple reads per well detected #> ‚Ñπ Time series detected #> ‚Ñπ Multiple reads per well detected #> # A tibble: 3,432 √ó 9 #>    well   time  temp  mean st_dev  x1_2  x0_1  x1_0  x2_1 #>    <chr> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 B1        0  30.6 0.131 0.0254 0.131 0.111 0.114 0.166 #>  2 B1      900  30.4 0.129 0.0216 0.132 0.112 0.115 0.159 #>  3 B1     1500  30.5 0.133 0.0226 0.146 0.113 0.114 0.157 #>  4 B1     2100  30.7 0.132 0.0226 0.143 0.113 0.115 0.160 #>  5 B1     2700  30.6 0.133 0.0220 0.146 0.114 0.116 0.158 #>  6 B1     3300  30.2 0.133 0.0208 0.144 0.114 0.116 0.156 #>  7 B1     3900  30.6 0.135 0.0227 0.147 0.115 0.117 0.161 #>  8 B1     4500  30.6 0.134 0.0210 0.146 0.116 0.118 0.158 #>  9 B1     5100  30.5 0.135 0.0208 0.147 0.117 0.119 0.159 #> 10 B1     5700  30.5 0.136 0.0201 0.147 0.118 0.120 0.158 #> # ‚Ñπ 3,422 more rows"},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-051","dir":"Changelog","previous_headings":"","what":"tread 0.5.1","title":"tread 0.5.1","text":"Standalone type checks using rlang","code":""},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-050","dir":"Changelog","previous_headings":"","what":"tread 0.5.0","title":"tread 0.5.0","text":"Rename package tread Use citation file format (CFF) addition bibtex","code":""},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-041","dir":"Changelog","previous_headings":"","what":"tread 0.4.1","title":"tread 0.4.1","text":"Add citation information doi badge Update author copyright holder information","code":""},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-040","dir":"Changelog","previous_headings":"","what":"tread 0.4.0","title":"tread 0.4.0","text":"Add tunite() stitching together time series measurements plate reader programme stopped restarted Add single_time_single_reads() time_series_single_reads(), allow tparse() deal four data formats (combinations single multiple reads per well well single timepoint time series) tparse() now returns tibble::tibble() clean column names correct column types Deprecated tread_temperature() since special case tparse() much less flexible regards format input file Improve documentation create pkgdown website Expand unit testing use GitHub CI","code":""},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-032","dir":"Changelog","previous_headings":"","what":"tread 0.3.2","title":"tread 0.3.2","text":"Use writeLines() instead print() avoid line numbers Fixed namespace Got around R CMD check note unused import utils, needed ()","code":""},{"path":"https://www.gl-eb.me/tread/news/index.html","id":"tread-031","dir":"Changelog","previous_headings":"","what":"tread 0.3.1","title":"tread 0.3.1","text":"Implemented initial version tparse(), supports multiple reads per well single multiple timepoint OD measurements Use renv package development Bug fixes minor improvements","code":""}]
